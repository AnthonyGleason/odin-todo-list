(()=>{"use strict";var t={772:(t,e,n)=>{n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([t.id,':root{\n    --colora: #838aeb;\n    --colorb: #ff919c;\n    --colorc: #fff6d1;\n    --colord: #3f3f3f;\n}\n*{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\nbody{\n    height: 100vh;\n    width: 100vw;\n    background-color: var(--colord);\n    display: grid;\n    grid-template-columns: 1fr 5fr;\n    grid-template-rows: 1fr 5fr;\n    grid-template-areas:\n    "header header"\n    "sidebar content";\n}\n\n\n.content{\n    background-color:var(--colorc);\n    grid-area: content;\n    margin: 20px;\n    border-radius: 15px;\n}\n.header{\n    background-color: var(--colorb);\n    grid-area: header;\n    margin: 20px;\n    border-radius: 15px;\n}\n.sidebar{\n    background-color: var(--colora);\n    grid-area: sidebar;\n    margin: 20px;\n    border-radius: 15px;\n}\n.project-item{\n    display: flex;\n}\n.task-item{\n    display: grid;\n    grid-template-areas: \n    "task-name task-desc task-due-date"\n    "task-priority task-notes task-checklist";\n}\n.task-name{\n    grid-area: task-name;\n}',"",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"AAAA;IACI,iBAAiB;IACjB,iBAAiB;IACjB,iBAAiB;IACjB,iBAAiB;AACrB;AACA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;AAC1B;AACA;IACI,aAAa;IACb,YAAY;IACZ,+BAA+B;IAC/B,aAAa;IACb,8BAA8B;IAC9B,2BAA2B;IAC3B;;qBAEiB;AACrB;;;AAGA;IACI,8BAA8B;IAC9B,kBAAkB;IAClB,YAAY;IACZ,mBAAmB;AACvB;AACA;IACI,+BAA+B;IAC/B,iBAAiB;IACjB,YAAY;IACZ,mBAAmB;AACvB;AACA;IACI,+BAA+B;IAC/B,kBAAkB;IAClB,YAAY;IACZ,mBAAmB;AACvB;AACA;IACI,aAAa;AACjB;AACA;IACI,aAAa;IACb;;6CAEyC;AAC7C;AACA;IACI,oBAAoB;AACxB",sourcesContent:[':root{\n    --colora: #838aeb;\n    --colorb: #ff919c;\n    --colorc: #fff6d1;\n    --colord: #3f3f3f;\n}\n*{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\nbody{\n    height: 100vh;\n    width: 100vw;\n    background-color: var(--colord);\n    display: grid;\n    grid-template-columns: 1fr 5fr;\n    grid-template-rows: 1fr 5fr;\n    grid-template-areas:\n    "header header"\n    "sidebar content";\n}\n\n\n.content{\n    background-color:var(--colorc);\n    grid-area: content;\n    margin: 20px;\n    border-radius: 15px;\n}\n.header{\n    background-color: var(--colorb);\n    grid-area: header;\n    margin: 20px;\n    border-radius: 15px;\n}\n.sidebar{\n    background-color: var(--colora);\n    grid-area: sidebar;\n    margin: 20px;\n    border-radius: 15px;\n}\n.project-item{\n    display: flex;\n}\n.task-item{\n    display: grid;\n    grid-template-areas: \n    "task-name task-desc task-due-date"\n    "task-priority task-notes task-checklist";\n}\n.task-name{\n    grid-area: task-name;\n}'],sourceRoot:""}]);const s=i},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,a){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<t.length;d++){var u=[].concat(t[d]);r&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),e.push(u))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var a={},i=[],s=0;s<t.length;s++){var c=t[s],d=r.base?c[0]+r.base:c[0],u=a[d]||0,p="".concat(d," ").concat(u);a[d]=u+1;var l=n(p),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==l)e[l].references++,e[l].updater(A);else{var h=o(A,r);r.byIndex=s,e.splice(s,0,{identifier:p,updater:h,references:1})}i.push(p)}return i}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var a=r(t=t||[],o=o||{});return function(t){t=t||[];for(var i=0;i<a.length;i++){var s=n(a[i]);e[s].references--}for(var c=r(t,o),d=0;d<a.length;d++){var u=n(a[d]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}a=c}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return t[r](a,a.exports,n),a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{var t=n(379),e=n.n(t),r=n(795),o=n.n(r),a=n(569),i=n.n(a),s=n(565),c=n.n(s),d=n(216),u=n.n(d),p=n(589),l=n.n(p),A=n(772),h={};function m(t,e,n,r,o,a,i){this.taskName=t,this.desc=e,this.dueDate=n,this.priority=r,this.notes=o,this.checklist=a,this.index=i}function f(){this.newProjectButton=document.querySelector("#new-project-button"),this.newProjectForm=document.querySelector("#new-project-form"),this.newProjectSubmitButton=document.querySelector("#project-submit-button"),this.newProjectCancelButton=document.querySelector("#project-cancel-button"),this.projectItemContainer=document.querySelector("#project-item-container"),this.newTaskButton=document.querySelector("#new-task-button"),this.newTaskSubmitButton=document.querySelector("#task-submit-button"),this.newTaskCancelButton=document.querySelector("#task-cancel-button"),this.newTaskForm=document.querySelector("#new-task-form"),this.taskItemContainer=document.querySelector("#task-item-container")}function y(t,e){this.isCurrentProject=e,this.index,this.projectName=t,this.taskArray=[]}function k(){this.projectArray=[]}h.styleTagTransform=l(),h.setAttributes=c(),h.insert=i().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=u(),e()(A.Z,h),A.Z&&A.Z.locals&&A.Z.locals,f.prototype.addProject=function(t){this.projectItemContainer.appendChild(t)},f.prototype.addTask=function(t){this.taskItemContainer.appendChild(t)},f.prototype.addProjectFormListeners=function(t){this.newProjectButton.addEventListener("click",(()=>{this.toggleNewProjectForm()})),this.newProjectSubmitButton.addEventListener("click",(()=>{t.addProject(new y(projectName.value,!1),this)})),this.newProjectCancelButton.addEventListener("click",(()=>{this.toggleNewProjectForm()}))},f.prototype.addTaskFormListeners=function(t){this.newTaskButton.addEventListener("click",(()=>{this.toggleNewTaskForm()})),this.newTaskSubmitButton.addEventListener("click",(()=>{t.addTask(new m)})),this.newTaskCancelButton.addEventListener("click",(()=>{this.toggleNewTaskForm()}))},f.prototype.createProjectItem=function(t,e){let n=document.createElement("div");n.setAttribute("class","project-item"),n.setAttribute("index",t.index);let r=document.createElement("button");r.setAttribute("class","project-item-button"),r.setAttribute("index",t.index),r.textContent=t.projectName,r.addEventListener("click",(()=>{e.switchProject(t.index)})),n.appendChild(r);let o=document.createElement("button");return o.setAttribute("class","project-remove-button"),o.setAttribute("index",t.index),o.textContent="X",o.addEventListener("click",(()=>{e.removeProject(o.getAttribute("index"),this)})),n.appendChild(o),n},f.prototype.createTaskItem=function(t,e){let n=document.createElement("div");n.setAttribute("class","task-item");let r=document.createElement("div");r.setAttribute("class","task-name"),r.textContent=[`Task Name: ${t.taskName}`];let o=document.createElement("div");o.setAttribute("class","task-desc"),o.textContent=[`Task Description: ${t.desc}`];let a=document.createElement("div");a.setAttribute("class","task-due-date"),a.textContent=[`Task Due Date: ${t.dueDate}`];let i=document.createElement("div");i.setAttribute("class","task-priority"),i.textContent=[`Task Priority: ${t.priority}`];let s=document.createElement("div");s.setAttribute("class","task-notes"),s.textContent=[`Task Notes: ${t.notes}`];let c=document.createElement("button");return c.setAttribute("class","task-checklist"),this.initTaskChecklistButtonText(t,c),c.addEventListener("click",(()=>{this.toggleTaskCompleted(t,c)})),n.appendChild(r),n.appendChild(o),n.appendChild(a),n.appendChild(i),n.appendChild(s),n.appendChild(c),n},f.prototype.clearProjectDisplay=function(){this.projectItemContainer.innerHTML=""},f.prototype.clearTaskDisplay=function(){this.taskItemContainer.innerHTML=""},f.prototype.init=function(t,e){this.addProjectFormListeners(t),this.addTaskFormListeners(e)},f.prototype.initTaskChecklistButtonText=function(t,e){1==t.checklist?e.textContent="Completed! :)":0==t.checklist&&(e.textContent="Not Completed")},f.prototype.toggleNewProjectForm=function(){"none"==this.newProjectForm.style.display?this.newProjectForm.style.display="block":this.newProjectForm.style.display="none"},f.prototype.toggleTaskCompleted=function(t,e){0==t.checklist?(e.textContent="Completed! :)",t.checklist=!0):1==t.checklist&&(e.textContent="Not Completed",t.checklist=!1)},f.prototype.toggleNewTaskForm=function(){"none"==this.newTaskForm.style.display?this.newTaskForm.style.display="block":this.newTaskForm.style.display="none"},f.prototype.updateProjectDisplay=function(t){this.clearProjectDisplay(),t.projectArray.forEach((e=>{this.addProject(this.createProjectItem(e,t))}))},f.prototype.updateTaskDisplay=function(t){this.clearTaskDisplay(),t.taskArray.forEach((e=>{this.addTask(this.createTaskItem(e,t))}))},y.prototype.addTask=function(t,e){t.index=this.taskArray.length,this.pushToArray(t),e.updateTaskDisplay(this)},y.prototype.pushToArray=function(t){this.taskArray.push(t)},y.prototype.removeTask=function(t,e){this.taskArray.splice(t,1),this.updateIndexes(),e.updateTaskDisplay(this)},y.prototype.updateIndexes=function(){let t=0;this.taskArray.forEach((e=>{e.index=t,t++}))},k.prototype.addProject=function(t,e){t.index=this.projectArray.length,this.pushToArray(t),e.updateProjectDisplay(this)},k.prototype.getCurrentProject=function(){let t;return this.projectArray.forEach((e=>{1==e.isCurrentProject&&(t=e)})),t},k.prototype.pushToArray=function(t){this.projectArray.push(t)},k.prototype.removeProject=function(t,e){this.projectArray.splice(t,1),this.updateIndexes(),e.updateProjectDisplay(this)},k.prototype.switchProject=function(t){this.getCurrentProject().isCurrentProject=!1,this.projectArray[t].isCurrentProject=!0},k.prototype.updateIndexes=function(){let t=0;this.projectArray.forEach((e=>{e.index=t,t++}))};let C=new k,b=new f,v=new y("default",!0);b.init(C,v),C.addProject(v,b),v.addTask(new m(1,1,1,1,1,1,1),b)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,